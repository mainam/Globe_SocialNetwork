#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MAINAMDB")]
	public partial class NetDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNET(NET instance);
    partial void UpdateNET(NET instance);
    partial void DeleteNET(NET instance);
    #endregion
		
		public NetDbDataContext() : 
				base(global::DataAccess.Properties.Settings.Default.MAINAMDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NetDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NetDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NetDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NetDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<NET> NETs
		{
			get
			{
				return this.GetTable<NET>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NET")]
	public partial class NET : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NET_ID;
		
		private string _NET_NAME;
		
		private string _NET_API_KEY;
		
		private bool _NET_STATUS;
		
		private string _AFF_SUB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNET_IDChanging(string value);
    partial void OnNET_IDChanged();
    partial void OnNET_NAMEChanging(string value);
    partial void OnNET_NAMEChanged();
    partial void OnNET_API_KEYChanging(string value);
    partial void OnNET_API_KEYChanged();
    partial void OnNET_STATUSChanging(bool value);
    partial void OnNET_STATUSChanged();
    partial void OnAFF_SUBChanging(string value);
    partial void OnAFF_SUBChanged();
    #endregion
		
		public NET()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NET_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string NET_ID
		{
			get
			{
				return this._NET_ID;
			}
			set
			{
				if ((this._NET_ID != value))
				{
					this.OnNET_IDChanging(value);
					this.SendPropertyChanging();
					this._NET_ID = value;
					this.SendPropertyChanged("NET_ID");
					this.OnNET_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NET_NAME", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NET_NAME
		{
			get
			{
				return this._NET_NAME;
			}
			set
			{
				if ((this._NET_NAME != value))
				{
					this.OnNET_NAMEChanging(value);
					this.SendPropertyChanging();
					this._NET_NAME = value;
					this.SendPropertyChanged("NET_NAME");
					this.OnNET_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NET_API_KEY", DbType="VarChar(250)")]
		public string NET_API_KEY
		{
			get
			{
				return this._NET_API_KEY;
			}
			set
			{
				if ((this._NET_API_KEY != value))
				{
					this.OnNET_API_KEYChanging(value);
					this.SendPropertyChanging();
					this._NET_API_KEY = value;
					this.SendPropertyChanged("NET_API_KEY");
					this.OnNET_API_KEYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NET_STATUS", DbType="Bit NOT NULL")]
		public bool NET_STATUS
		{
			get
			{
				return this._NET_STATUS;
			}
			set
			{
				if ((this._NET_STATUS != value))
				{
					this.OnNET_STATUSChanging(value);
					this.SendPropertyChanging();
					this._NET_STATUS = value;
					this.SendPropertyChanged("NET_STATUS");
					this.OnNET_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AFF_SUB", DbType="VarChar(50)")]
		public string AFF_SUB
		{
			get
			{
				return this._AFF_SUB;
			}
			set
			{
				if ((this._AFF_SUB != value))
				{
					this.OnAFF_SUBChanging(value);
					this.SendPropertyChanging();
					this._AFF_SUB = value;
					this.SendPropertyChanged("AFF_SUB");
					this.OnAFF_SUBChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
